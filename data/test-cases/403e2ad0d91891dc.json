{
  "uid" : "403e2ad0d91891dc",
  "name" : "TC07: Successful account deletion.",
  "fullName" : "tests.test_profile_management.TestProfileManagement#test_accound_deletion",
  "historyId" : "6bdcfb3f32205dfe77bc9fcb6eeef772",
  "time" : {
    "start" : 1735827948002,
    "stop" : 1735827951156,
    "duration" : 3154
  },
  "description" : "\n    This test verifies that a user can successfully delete their account by accessing the account settings and following the deletion process.\n    ",
  "descriptionHtml" : "<pre><code>This test verifies that a user can successfully delete their account by accessing the account settings and following the deletion process.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: headless chrome=112.0.5615.165)",
  "statusTrace" : "self = <test_profile_management.TestProfileManagement object at 0x7f025ef50310>\ncreate_account = ('jose08@example.net', '5+Bvaz@X)2Yl', 'Matthew')\n\n    @pytest.mark.order(7)\n    @pytest.mark.regression\n    @allure.feature(\"Profile Management\")\n    @allure.description(\"\"\"\n    This test verifies that a user can successfully delete their account by accessing the account settings and following the deletion process.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"TC07: Successful account deletion.\")\n    def test_accound_deletion(self, create_account):\n        email, password, username = create_account\n        try:\n            # Steps:\n            self.home_page.click_username_button()\n            self.home_page.click_settings_button()\n            self.account_management_page.click_delete_account_button()\n            self.delete_management_page.is_opened()\n            self.delete_management_page.enter_email(email)\n            self.delete_management_page.enter_password(password)\n            self.delete_management_page.click_delete_account_button()\n            self.account_deleted_page.is_opened()\n            self.account_deleted_page.is_page_heading_account_deleted()\n        except Exception as e:\n            take_screenshot(self.driver, \"Account Deletion Test Failed\")\n>           raise e\n\ntests/test_profile_management.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_profile_management.py:30: in test_accound_deletion\n    self.account_deleted_page.is_opened()\nbase/base_page.py:18: in is_opened\n    self.wait.until(EC.url_to_be(self.PAGE_URL))\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../local/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:125: in _predicate\n    return url == driver.current_url\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:470: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f025d50dad0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"{Alert text : \"},\"error\":\"unexpected alert open\",\"message\":\"unexpected alert open: {Alert text : }\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nE           Message: unexpected alert open: {Alert text : }\nE             (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1735827852795,
      "stop" : 1735827852859,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "create_account",
    "time" : {
      "start" : 1735827939603,
      "stop" : 1735827948001,
      "duration" : 8398
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Open the page https://app.todoist.com/auth/signup.",
      "time" : {
        "start" : 1735827939606,
        "stop" : 1735827940094,
        "duration" : 488
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Enter email into the \"Email\" field.",
      "time" : {
        "start" : 1735827940094,
        "stop" : 1735827941233,
        "duration" : 1139
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "email",
        "value" : "'jose08@example.net'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Enter password into the \"Password\" field.",
      "time" : {
        "start" : 1735827941233,
        "stop" : 1735827941330,
        "duration" : 97
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'5+Bvaz@X)2Yl'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Click on the \"Sign up with Email\" button.",
      "time" : {
        "start" : 1735827941331,
        "stop" : 1735827941409,
        "duration" : 78
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Enter username into the \"Your name\" field.",
      "time" : {
        "start" : 1735827941409,
        "stop" : 1735827945728,
        "duration" : 4319
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "username",
        "value" : "'Matthew'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Click on the \"Continue\" button.",
      "time" : {
        "start" : 1735827945728,
        "stop" : 1735827946209,
        "duration" : 481
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Select \"Personal\" checkbox.",
      "time" : {
        "start" : 1735827946210,
        "stop" : 1735827946269,
        "duration" : 59
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Click on the \"Launch Todoist\" button.",
      "time" : {
        "start" : 1735827946269,
        "stop" : 1735827947977,
        "duration" : 1708
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Verify that the page with the URL https://app.todoist.com/app/today is opened.",
      "time" : {
        "start" : 1735827947977,
        "stop" : 1735827948001,
        "duration" : 24
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 9,
    "hasContent" : true
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1735827939547,
      "stop" : 1735827939603,
      "duration" : 56
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1735827939231,
      "stop" : 1735827939547,
      "duration" : 316
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    This test verifies that a user can successfully delete their account by accessing the account settings and following the deletion process.\n    ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: headless chrome=112.0.5615.165)",
    "statusTrace" : "self = <test_profile_management.TestProfileManagement object at 0x7f025ef50310>\ncreate_account = ('jose08@example.net', '5+Bvaz@X)2Yl', 'Matthew')\n\n    @pytest.mark.order(7)\n    @pytest.mark.regression\n    @allure.feature(\"Profile Management\")\n    @allure.description(\"\"\"\n    This test verifies that a user can successfully delete their account by accessing the account settings and following the deletion process.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"TC07: Successful account deletion.\")\n    def test_accound_deletion(self, create_account):\n        email, password, username = create_account\n        try:\n            # Steps:\n            self.home_page.click_username_button()\n            self.home_page.click_settings_button()\n            self.account_management_page.click_delete_account_button()\n            self.delete_management_page.is_opened()\n            self.delete_management_page.enter_email(email)\n            self.delete_management_page.enter_password(password)\n            self.delete_management_page.click_delete_account_button()\n            self.account_deleted_page.is_opened()\n            self.account_deleted_page.is_page_heading_account_deleted()\n        except Exception as e:\n            take_screenshot(self.driver, \"Account Deletion Test Failed\")\n>           raise e\n\ntests/test_profile_management.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_profile_management.py:30: in test_accound_deletion\n    self.account_deleted_page.is_opened()\nbase/base_page.py:18: in is_opened\n    self.wait.until(EC.url_to_be(self.PAGE_URL))\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../local/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:125: in _predicate\n    return url == driver.current_url\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:470: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f025d50dad0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"{Alert text : \"},\"error\":\"unexpected alert open\",\"message\":\"unexpected alert open: {Alert text : }\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nE           Message: unexpected alert open: {Alert text : }\nE             (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:228: UnexpectedAlertPresentException",
    "steps" : [ {
      "name" : "Click on the \"Username\" button.",
      "time" : {
        "start" : 1735827948002,
        "stop" : 1735827948185,
        "duration" : 183
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Click on the \"Settings\" button.",
      "time" : {
        "start" : 1735827948185,
        "stop" : 1735827948304,
        "duration" : 119
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Click on the \"Delete account\" button.",
      "time" : {
        "start" : 1735827948304,
        "stop" : 1735827948635,
        "duration" : 331
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Verify that the page with the URL https://app.todoist.com/app/settings/account/delete is opened.",
      "time" : {
        "start" : 1735827948635,
        "stop" : 1735827948639,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Enter email into the \"Todoist email\" field.",
      "time" : {
        "start" : 1735827948639,
        "stop" : 1735827948814,
        "duration" : 175
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "email",
        "value" : "'jose08@example.net'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Enter password into the \"Todoist password\" field.",
      "time" : {
        "start" : 1735827948814,
        "stop" : 1735827948944,
        "duration" : 130
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'5+Bvaz@X)2Yl'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Click on the \"Delete account\" button.",
      "time" : {
        "start" : 1735827948944,
        "stop" : 1735827949008,
        "duration" : 64
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Verify that the page with the URL https://app.todoist.com/auth/account-deleted is opened.",
      "time" : {
        "start" : 1735827949008,
        "stop" : 1735827951015,
        "duration" : 2007
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: headless chrome=112.0.5615.165)\n\n",
      "statusTrace" : "  File \"/usr/workspace/base/base_page.py\", line 18, in is_opened\n    self.wait.until(EC.url_to_be(self.PAGE_URL))\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py\", line 125, in _predicate\n    return url == driver.current_url\n                  ^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 470, in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 228, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "34de5b69720fa4e9",
      "name" : "Account Deletion Test Failed",
      "source" : "34de5b69720fa4e9.png",
      "type" : "image/png",
      "size" : 127851
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 8,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1735827951225,
      "stop" : 1735827951225,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "Profile Management"
  }, {
    "name" : "tag",
    "value" : "regression"
  }, {
    "name" : "tag",
    "value" : "order(7)"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_profile_management"
  }, {
    "name" : "subSuite",
    "value" : "TestProfileManagement"
  }, {
    "name" : "host",
    "value" : "d1ed54e2cebd"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_profile_management"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "29b1d358ee6d63d",
        "status" : "passed",
        "time" : {
          "start" : 1735821807370,
          "stop" : 1735821811860,
          "duration" : 4490
        }
      }, {
        "uid" : "1bb3a1a0a4cf37b2",
        "status" : "passed",
        "time" : {
          "start" : 1735333470477,
          "stop" : 1735333474597,
          "duration" : 4120
        }
      } ]
    },
    "tags" : [ "regression", "order(7)" ]
  },
  "source" : "403e2ad0d91891dc.json",
  "parameterValues" : [ ]
}